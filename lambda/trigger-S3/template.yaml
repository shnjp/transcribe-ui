#
# S3Triggerとstorageを紐付けるためのCFm
#
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample template to illustrate use of existing S3 bucket as an event source for a Lambda function
Parameters:
  customstorageBucketName:
    Type: String
    Description: S3 bucket that's used for the Lambda event notification
  # customstorageArn:
  #   Type: String
  # functionS3TriggerArn:
  #   Type: String
  # env:
  #   Type: String

# Conditions:
#   ShouldNotCreateEnvResources: !Equals [!Ref env, NONE ]

Resources:
  S3NotificationLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: triggerS3/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.7
      Timeout: 5

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt S3NotificationLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${customstorageBucketName}'


  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:PutBucketNotification'
                  - 's3:GetBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${customstorageBucketName}'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${customstorageBucketName}/input/*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${customstorageBucketName}/output/*'
                  - !Sub 'arn:aws:s3:::${customstorageBucketName}/.write_access_check_file.temp'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'transcribe:StartTranscriptionJob'
                Resource: '*'

  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.7
      Timeout: 50
      Code:
        ZipFile: !Sub |
            from __future__ import print_function
            import json
            import boto3
            import cfnresponse

            SUCCESS = "SUCCESS"
            FAILED = "FAILED"

            print('Loading function')
            s3 = boto3.resource('s3')

            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                print("add_notification")
                bucket_notification = s3.BucketNotification(Bucket)
                print("bucket_notification:", bucket_notification)
                response = bucket_notification.put(
                    NotificationConfiguration={
                        'LambdaFunctionConfigurations': [
                            {
                                'LambdaFunctionArn': LambdaArn,
                                'Events': [
                                    's3:ObjectCreated:*'
                                ],
                                'Filter': {
                                    'Key': {
                                        'FilterRules': [
                                            {
                                                'Name': 'prefix',
                                                'Value': 'input/'
                                            },
                                        ]
                                    }
                                }
                            }
                        ]
                    }
                )
                print(response)
                print("Put request completed....")

            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")

  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt S3NotificationLambdaFunction.Arn
      Bucket: !Ref customstorageBucketName
